//Document contains all cSs components fo memorization 


1. Box Model - width : Sets element width. - height : Sets element height. - padding : Space inside the border. - margin : Space outside the border. - border : Outline around the element. - box-sizing : Includes padding/border in total width ( border-box ).
2. Text & Font - color : Text color. - font-size : Size of text. - font-family : Font style. - fontweight : Thickness ( normal , bold , 100 â€“ 900 ). - text-align : Horizontal alignment ( left , center , right ). - line-height : Line spacing. - text-decoration : Underline, overline, etc.
3. Position & Display - position : static , relative , absolute , fixed , sticky . - top , right , bottom , left : Offset positioned element. - z-index : Stack order. - display : block , inline , flex , grid , none . - visibility : visible , hidden .
4. Flexbox Layout - display: flex : Activates flex container. - flex-direction : row , column . justify-content : center , space-between , etc. - align-items : center , flex-start , stretch . - gap : Spacing between items.
5. Grid Layout - display: grid : Activates grid layout. - grid-template-columns : Defines column structure. - grid-template-rows : Defines row structure. - gap : Spacing between cells.
6. Backgrounds - background-color : Sets background color. - background-image : Image as background. - background-size : cover , contain , etc. - background-repeat : Repeat image ( norepeat ).
7. Borders & Effects - border-radius : Rounded corners. - box-shadow : Shadow outside box. opacity : Transparency ( 0 to 1 ).
8. Transitions & Animation - transition : Smooth change ( transition: all 0.3s ease; ). animation : Attach keyframe animation.
9. Responsive Design
@media (max-width: 768px) { body { font-size: 14px; } }
1
10. Miscellaneous - overflow : hidden , scroll , auto . - cursor : Pointer style ( pointer , notallowed ). - visibility : Show or hide element. - white-space : Wrapping behavior. - textoverflow : Ellipsis for overflowed text.
Use this cheatsheet to quickly reference core CSS properties during web development.
**Comprehensive CSS Cheatsheet**

---


/*
CSS RULE OF NINE 

Box Model
Typography
Flexbox
Grid
Backgrounds
Border and Effects
Transition and animation 
Responsive Design
Mescellanous

tailwind-css

utility first css - utility tailwind classes 
configuration 
responsive-design
plugins

how to link external stylesheets 
<link rel="stylesheets" href="index.css">

how to link external font
link in the head of html 
<head>

</head>

*/

### 1. Box Model & Spacing

* `width`, `min-width`, `max-width`
* `height`, `min-height`, `max-height`
* `margin`, `margin-top`, `margin-right`, `margin-bottom`, `margin-left`
* `padding`, `padding-top`, `padding-right`, `padding-bottom`, `padding-left`
* `border`, `border-width`, `border-style`, `border-color`
* `border-top`, `border-right`, `border-bottom`, `border-left`
* `box-sizing`: `content-box`, `border-box`
* `outline`, `outline-width`, `outline-style`, `outline-color`

### 2. Typography & Text

* `color`
* `font-family`
* `font-size`
* `font-weight`: `normal`, `bold`, `lighter`, `bolder`, `100-900`
* `font-style`: `normal`, `italic`, `oblique`
* `text-align`: `left`, `right`, `center`, `justify`
* `text-decoration`: `none`, `underline`, `line-through`, `overline`
* `text-transform`: `uppercase`, `lowercase`, `capitalize`
* `line-height`
* `letter-spacing`
* `word-spacing`
* `direction`: `ltr`, `rtl`
* `white-space`: `normal`, `nowrap`, `pre`, `pre-line`, `pre-wrap`
* `text-indent`
* `vertical-align`

### 3. Positioning & Display

* `position`: `static`, `relative`, `absolute`, `fixed`, `sticky`
* `top`, `right`, `bottom`, `left`
* `z-index`
* `display`: `none`, `block`, `inline`, `inline-block`, `flex`, `grid`, `inline-flex`, `inline-grid`, `table`, `table-cell`
* `visibility`: `visible`, `hidden`, `collapse`
* `overflow`, `overflow-x`, `overflow-y`: `visible`, `hidden`, `scroll`, `auto`
* `float`: `left`, `right`, `none`
* `clear`: `none`, `left`, `right`, `both`

### 4. Flexbox

* `display: flex`
* `flex-direction`: `row`, `row-reverse`, `column`, `column-reverse`
* `justify-content`: `flex-start`, `flex-end`, `center`, `space-between`, `space-around`, `space-evenly`
* `align-items`: `stretch`, `flex-start`, `flex-end`, `center`, `baseline`
* `align-content`: `stretch`, `center`, `flex-start`, `flex-end`, `space-between`, `space-around`
* `flex-wrap`: `nowrap`, `wrap`, `wrap-reverse`
* `flex`, `flex-grow`, `flex-shrink`, `flex-basis`
* `order`

### 5. Grid

* `display: grid`
* `grid-template-columns`, `grid-template-rows`
* `grid-template-areas`
* `grid-column`, `grid-row`, `grid-area`
* `grid-auto-columns`, `grid-auto-rows`
* `grid-gap`, `row-gap`, `column-gap`
* `justify-items`, `align-items`, `place-items`
* `justify-content`, `align-content`, `place-content`

### 6. Backgrounds

* `background-color`
* `background-image`
* `background-repeat`: `repeat`, `no-repeat`, `repeat-x`, `repeat-y`
* `background-position`
* `background-size`: `cover`, `contain`
* `background-attachment`: `scroll`, `fixed`, `local`
* `background-clip`, `background-origin`

### 7. Borders, Radius & Effects

* `border`, `border-width`, `border-style`, `border-color`
* `border-radius`, `border-top-left-radius`, `border-top-right-radius`, `border-bottom-right-radius`, `border-bottom-left-radius`
* `box-shadow`: `h-offset v-offset blur spread color`
* `text-shadow`: `h-offset v-offset blur color`
* `opacity`: `0` (transparent) to `1` (opaque)

### 8. Lists

* `list-style`, `list-style-type`, `list-style-position`, `list-style-image`

### 9. Tables

* `border-collapse`: `collapse`, `separate`
* `border-spacing`
* `caption-side`: `top`, `bottom`
* `empty-cells`: `show`, `hide`
* `table-layout`: `auto`, `fixed`

### 10. Pseudo-classes & Pseudo-elements

* `:hover`, `:focus`, `:active`, `:visited`, `:first-child`, `:last-child`, `:nth-child(n)`
* `::before`, `::after`, `::first-line`, `::first-letter`

### 11. Transitions & Animations

* `transition`, `transition-property`, `transition-duration`, `transition-timing-function`, `transition-delay`
* `animation`, `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, `animation-play-state`

### 12. Media Queries

```css
@media (max-width: 768px) {
  body {
    font-size: 14px;
  }
}
```

* Used to apply styles conditionally based on screen/device size.

### 13. Cursor & Miscellaneous

* `cursor`: `pointer`, `default`, `not-allowed`, `text`, `move`
* `resize`: `none`, `both`, `horizontal`, `vertical`
* `visibility`, `content-visibility`
* `user-select`: `none`, `text`, `all`, `auto`
* `pointer-events`: `none`, `auto`
* `will-change`: Optimization hint for animating properties

---

Use this extended cheatsheet as a powerful reference while working on web layouts and styles. Want a printable PDF version or an HTML page layout? Just ask!
**Comprehensive CSS Cheatsheet with Explanations**

---

### 1. Box Model & Spacing

* `width`, `min-width`, `max-width`: Set the width of an element, with optional min/max limits.
* `height`, `min-height`, `max-height`: Set the height of an element, with optional min/max limits.
* `margin`, `margin-*`: Outer spacing around an element.
* `padding`, `padding-*`: Inner spacing between content and border.
* `border`, `border-*`: Add borders around elements with width, style, and color.
* `box-sizing`: Controls if padding/border are included in width (`border-box`) or not (`content-box`).
* `outline`, `outline-*`: Like borders, but don't affect layout. Often used for focus styles.

### 2. Typography & Text

* `color`: Text color.
* `font-family`: The typeface used for text.
* `font-size`: Controls text size.
* `font-weight`: Thickness of text (e.g., `normal`, `bold`, `300`).
* `font-style`: Italics or oblique style.
* `text-align`: Horizontal text alignment.
* `text-decoration`: Line styling like `underline`, `line-through`.
* `text-transform`: Change case (e.g., `uppercase`).
* `line-height`: Space between lines.
* `letter-spacing`: Space between characters.
* `word-spacing`: Space between words.
* `direction`: Text direction (`ltr`, `rtl`).
* `white-space`: Handling of spaces and line breaks.
* `text-indent`: Indent the first line of text.
* `vertical-align`: Align inline elements vertically.

### 3. Positioning & Display

* `position`: Controls layout (`static`, `relative`, `absolute`, `fixed`, `sticky`).
* `top`, `right`, `bottom`, `left`: Offset positioned elements.
* `z-index`: Controls stacking order.
* `display`: Defines layout behavior (e.g., `block`, `inline`, `flex`, `grid`).
* `visibility`: Show or hide elements (`visible`, `hidden`).
* `overflow`: Controls overflow content (`auto`, `scroll`, `hidden`).
* `float`: Pushes element left/right (legacy layout method).
* `clear`: Prevents float overlap.

### 4. Flexbox

* `display: flex`: Turns an element into a flex container.
* `flex-direction`: Direction of flex items.
* `justify-content`: Align items along the main axis.
* `align-items`: Align items along the cross axis.
* `align-content`: Align multiple lines in flex container.
* `flex-wrap`: Wrap items onto new lines.
* `flex`: Shorthand for grow/shrink/basis.
* `order`: Controls item order.

### 5. Grid

* `display: grid`: Creates a grid container.
* `grid-template-columns`, `grid-template-rows`: Define rows and columns.
* `grid-template-areas`: Named grid sections.
* `grid-column`, `grid-row`: Item placement.
* `grid-gap`, `row-gap`, `column-gap`: Spacing between grid cells.
* `justify-*`, `align-*`, `place-*`: Alignment properties for content and items.

### 6. Backgrounds

* `background-color`: Sets background color.
* `background-image`: URL for image background.
* `background-repeat`: Repeat behavior (`repeat`, `no-repeat`).
* `background-position`: Position of background image.
* `background-size`: Size control (`cover`, `contain`).
* `background-attachment`: Scroll behavior of background.
* `background-clip`, `background-origin`: Define painting areas.

### 7. Borders, Radius & Effects

* `border-radius`: Round element corners.
* `box-shadow`: Shadow behind element.
* `text-shadow`: Shadow behind text.
* `opacity`: Set transparency (0 = transparent, 1 = solid).

### 8. Lists

* `list-style-type`: Bullet style.
* `list-style-position`: Bullet inside/outside box.
* `list-style-image`: Custom image bullet.

### 9. Tables

* `border-collapse`: Merge table borders.
* `border-spacing`: Space between cells.
* `caption-side`: Position of `<caption>`.
* `empty-cells`: Show/hide empty cells.
* `table-layout`: Automatic or fixed cell width.

### 10. Pseudo-classes & Pseudo-elements

* `:hover`: Style on mouse hover.
* `:focus`: Style on focus (keyboard/mouse).
* `:active`: Style when clicked.
* `:nth-child(n)`: Targets child element by number.
* `::before`, `::after`: Insert content before/after element.

### 11. Transitions & Animations

* `transition`: Animate pro
CSS (Cascading Style Sheets) is a huge topic, and it controls the look and layout of webpages. When you say "all CSS components," Iâ€™m guessing you want a detailed explanation of the core **CSS properties and concepts** and what they mean.

Iâ€™ll break it down into **categories of CSS properties** with explanations and examples. This will be a solid, detailed overview of the key CSS features used to style elements.

---

# CSS Components & What They Mean â€” Detailed Overview

---

## 1. **Selectors**

Selectors define **which HTML elements** the CSS rules apply to.

* **Type selector:** `p` â€” all `<p>` tags
* **Class selector:** `.btn` â€” all elements with class="btn"
* **ID selector:** `#header` â€” element with id="header"
* **Attribute selector:** `input[type="text"]`
* **Pseudo-classes:** `a:hover` â€” when you hover over a link
* **Pseudo-elements:** `p::first-line` â€” first line of a paragraph

---

## 2. **Box Model Properties**

Every element in HTML is a box. The box model defines the space the element takes.

* **content** â€” the actual content (text, image)
* **padding** â€” space between content and border
* **border** â€” the border around padding
* **margin** â€” space outside the border

### Properties:

* `width`, `height` â€” size of the content box
* `padding: 10px;` â€” inner space
* `border: 2px solid black;` â€” border style
* `margin: 20px;` â€” outer space

---

## 3. **Text & Font Properties**

Control text appearance.

* `color: red;` â€” text color
* `font-family: Arial, sans-serif;` â€” font type
* `font-size: 16px;` â€” size of the text
* `font-weight: bold;` â€” thickness (normal, bold, 100-900)
* `font-style: italic;` â€” normal or italic
* `text-align: center;` â€” left, right, center, justify
* `line-height: 1.5;` â€” space between lines
* `text-decoration: underline;` â€” underline, none, line-through
* `letter-spacing: 2px;` â€” space between letters
* `word-spacing: 5px;` â€” space between words
* `text-transform: uppercase;` â€” uppercase, lowercase, capitalize

---

## 4. **Background Properties**

Control backgrounds of elements.

* `background-color: #f0f0f0;` â€” background color
* `background-image: url('img.jpg');` â€” background image
* `background-repeat: no-repeat;` â€” repeat behavior
* `background-position: center center;` â€” where the image is placed
* `background-size: cover;` â€” size of the image (cover, contain, px, %)
* `background-attachment: fixed;` â€” scroll or fixed

---

## 5. **Display & Visibility**

Control how elements are displayed.

* `display: block;` â€” element takes full width, starts on new line
* `display: inline;` â€” element flows inline, no width/height
* `display: inline-block;` â€” like inline but you can set width/height
* `display: none;` â€” element not shown, removed from layout
* `visibility: hidden;` â€” element invisible but still takes space

---

## 6. **Positioning**

How elements are positioned on the page.

* `position: static;` â€” default, normal flow
* `position: relative;` â€” relative to its normal position (can use top, left)
* `position: absolute;` â€” positioned relative to nearest positioned ancestor
* `position: fixed;` â€” fixed relative to viewport (stays on scroll)
* `position: sticky;` â€” toggles between relative and fixed based on scroll

Properties to move the element:

* `top`, `bottom`, `left`, `right`

---

## 7. **Flexbox (Flexible Box Layout)**

Modern way to align and distribute space in a container.

* Container properties:

  * `display: flex;`
  * `flex-direction: row | column;` â€” main axis direction
  * `justify-content: flex-start | center | space-between | space-around;` â€” alignment on main axis
  * `align-items: stretch | center | flex-start | flex-end;` â€” alignment on cross axis
  * `flex-wrap: nowrap | wrap;` â€” whether items wrap

* Item properties:

  * `flex-grow: 1;` â€” grow to fill space
  * `flex-shrink: 1;` â€” shrink if needed
  * `flex-basis: 100px;` â€” default size

---

## 8. **Grid Layout**

Two-dimensional layout system (rows and columns).

* Container:

  * `display: grid;`
  * `grid-template-columns: 1fr 2fr;` â€” define columns widths
  * `grid-template-rows: 100px auto;` â€” define rows heights
  * `gap: 10px;` â€” space between grid cells

* Items:

  * `grid-column: 1 / 3;` â€” start at column 1 end before column 3
  * `grid-row: 2 / 3;`

---

## 9. **Borders & Outlines**

* `border-width: 1px;`
* `border-style: solid | dotted | dashed | none;`
* `border-color: red;`
* `border-radius: 5px;` â€” rounded corners
* `outline: 2px solid blue;` â€” outline around element (does not affect layout)

---

## 10. **Opacity & Visibility**

* `opacity: 0.5;` â€” transparency, 0 = invisible, 1 = opaque
* `visibility: hidden;` â€” element invisible but occupies space
* `visibility: visible;` â€” default

---

## 11. **Transitions & Animations**

Make elements smoothly change styles.

* `transition-property: all;` â€” which properties to animate
* `transition-duration: 0.3s;`
* `transition-timing-function: ease | linear | ease-in-out;`

Example:

```css
button {
  background-color: blue;
  transition: background-color 0.3s ease;
}
button:hover {
  background-color: red;
}
```

Animations use `@keyframes` for custom animations.

---

## 12. **Z-index**

Controls stack order of elements (which appears on top).

* Only works on positioned elements (`position` not `static`).
* Higher number = closer to the viewer.

Example:

```css
div {
  position: absolute;
  z-index: 10;
}
```

---

## 13. **Cursor**

Controls mouse cursor style over an element.

* `cursor: pointer;` â€” hand pointer, good for buttons/links
* `cursor: default;` â€” arrow (default)
* `cursor: wait;` â€” hourglass/wait icon

---

## 14. **Box Shadow & Text Shadow**

Add shadows to elements and text.

* `box-shadow: 5px 5px 10px rgba(0,0,0,0.3);`
* `text-shadow: 2px 2px 3px rgba(0,0,0,0.5);`

---

## 15. **Overflow**

What happens when content is too big for its container.

* `overflow: visible;` â€” default, content spills out
* `overflow: hidden;` â€” content clipped, no scroll
* `overflow: scroll;` â€” scrollbars always
* `overflow: auto;` â€” scrollbars only when needed

---

## 16. **Miscellaneous**

* `opacity: 0-1` â€” transparency level
* `box-sizing: content-box | border-box;` â€” how width and height are calculated (border-box includes padding and border)
* `visibility: visible | hidden;`
* `white-space: nowrap | normal | pre;` â€” how whitespace is handled
* `vertical-align: baseline | top | middle | bottom;` â€” vertical alignment in inline elements

---

# Summary Table (Core CSS Properties)

| Category             | Example Properties                      | What they control                 |
| -------------------- | --------------------------------------- | --------------------------------- |
| Selectors            | `.class`, `#id`, `element:hover`        | Target HTML elements              |
| Box Model            | `margin`, `padding`, `border`, `width`  | Element spacing and size          |
| Text & Fonts         | `font-size`, `color`, `font-weight`     | Text appearance                   |
| Backgrounds          | `background-color`, `background-image`  | Element backgrounds               |
| Display & Visibility | `display`, `visibility`, `opacity`      | How elements appear and behave    |
| Positioning          | `position`, `top`, `left`, `z-index`    | Where elements appear on the page |
| Flexbox              | `display:flex`, `justify-content`       | Flexible layouts                  |
| Grid                 | `display:grid`, `grid-template-columns` | Two-dimensional layouts           |
| Borders & Outlines   | `border`, `border-radius`, `outline`    | Borders and outlines              |
| Transitions          | `transition`, `animation`               | Smooth style changes              |
| Overflow             | `overflow`                              | Content clipping and scroll       |

---

If you want, I can create **a cheatsheet with example snippets** for each property or category to help you practice. Would that help?
